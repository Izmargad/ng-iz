{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/ilze/Documents/git/ng-iz/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.define-property.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.promise.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nfunction typeImplementation(_x, _x2, _x3) {\n  return _typeImplementation.apply(this, arguments);\n}\n\nfunction _typeImplementation() {\n  _typeImplementation = _asyncToGenerator(function* (element, text, _ref) {\n    var delay = _ref.delay,\n        _ref$skipClick = _ref.skipClick,\n        skipClick = _ref$skipClick === void 0 ? false : _ref$skipClick,\n        _ref$skipAutoClose = _ref.skipAutoClose,\n        skipAutoClose = _ref$skipAutoClose === void 0 ? false : _ref$skipAutoClose,\n        _ref$initialSelection = _ref.initialSelectionStart,\n        initialSelectionStart = _ref$initialSelection === void 0 ? undefined : _ref$initialSelection,\n        _ref$initialSelection2 = _ref.initialSelectionEnd,\n        initialSelectionEnd = _ref$initialSelection2 === void 0 ? undefined : _ref$initialSelection2; // TODO: properly type guard\n    // we use this workaround for now to prevent changing behavior\n\n    if (element.disabled) return;\n    if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n    var currentElement = function () {\n      return (0, _utils.getActiveElement)(element.ownerDocument);\n    }; // by default, a new element has its selection start and end at 0\n    // but most of the time when people call \"type\", they expect it to type\n    // at the end of the current input value. So, if the selection start\n    // and end are both the default of 0, then we'll go ahead and change\n    // them to the length of the current value.\n    // the only time it would make sense to pass the initialSelectionStart or\n    // initialSelectionEnd is if you have an input with a value and want to\n    // explicitly start typing with the cursor at 0. Not super common.\n\n\n    var value = (0, _utils.getValue)(currentElement());\n\n    var _ref2 = (0, _utils.getSelectionRange)(element),\n        selectionStart = _ref2.selectionStart,\n        selectionEnd = _ref2.selectionEnd;\n\n    if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n      (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n    }\n\n    var _ref3 = (0, _keyboard.keyboardImplementationWrapper)(text, {\n      delay: delay,\n      document: element.ownerDocument\n    }),\n        promise = _ref3.promise,\n        releaseAllKeys = _ref3.releaseAllKeys;\n\n    if (delay > 0) {\n      yield promise;\n    }\n\n    if (!skipAutoClose) {\n      releaseAllKeys();\n    } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n    return promise;\n  });\n  return _typeImplementation.apply(this, arguments);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;EAC3CG,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,kBAARF,GAA6BE,kBAA7BF;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;SAEeF,kB;;;;;0CAAf,WAAkCK,OAAlC,EAA2CC,IAA3C,QAMG;IAAA,IALDC,KAKC,QALDA,KAKC;IAAA,0BAJDC,SAIC;IAAA,IAJDA,SAIC,+BAJW,KAIX;IAAA,8BAHDC,aAGC;IAAA,IAHDA,aAGC,mCAHe,KAGf;IAAA,iCAFDC,qBAEC;IAAA,IAFDA,qBAEC,sCAFuBC,SAEvB;IAAA,kCADDC,mBACC;IAAA,IADDA,mBACC,uCADqBD,SACrB,2BACD;IACA;;IACA,IAAIN,OAAO,CAACQ,QAAZ,EAAsB;IACtB,IAAI,CAACL,SAAL,EAAgB,CAAC,GAAGL,MAAM,CAACW,KAAX,EAAkBT,OAAlB,EAJf,CAI2C;;IAE5C,IAAMU,cAAc,GAAG;MAAA,OAAM,CAAC,GAAGd,MAAM,CAACe,gBAAX,EAA6BX,OAAO,CAACY,aAArC,CAAN;IAAvB,EANC,CAMiF;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;;;IAGA,IAAMlB,KAAK,GAAG,CAAC,GAAGE,MAAM,CAACiB,QAAX,EAAqBH,cAAc,EAAnC,CAAd;;IACA,YAGI,CAAC,GAAGd,MAAM,CAACkB,iBAAX,EAA8Bd,OAA9B,CAHJ;IAAA,IACEe,cADF,SACEA,cADF;IAAA,IAEEC,YAFF,SAEEA,YAFF;;IAKA,IAAItB,KAAK,IAAI,IAATA,KAAkBqB,cAAc,KAAK,IAAnBA,IAA2BA,cAAc,KAAK,CAAhErB,MAAuEsB,YAAY,KAAK,IAAjBA,IAAyBA,YAAY,KAAK,CAAjHtB,CAAJ,EAAyH;MACvH,CAAC,GAAGE,MAAM,CAACqB,iBAAX,EAA8BP,cAAc,EAA5C,EAAgDL,qBAAqB,IAAI,IAAzBA,GAAgCA,qBAAhCA,GAAwDX,KAAK,CAACwB,MAA9G,EAAsHX,mBAAmB,IAAI,IAAvBA,GAA8BA,mBAA9BA,GAAoDb,KAAK,CAACwB,MAAhL;IACD;;IAED,YAGI,CAAC,GAAGnB,SAAS,CAACoB,6BAAd,EAA6ClB,IAA7C,EAAmD;MACrDC,KAAK,EAALA,KADqD;MAErDkB,QAAQ,EAAEpB,OAAO,CAACY;IAFmC,CAAnD,CAHJ;IAAA,IACES,OADF,SACEA,OADF;IAAA,IAEEC,cAFF,SAEEA,cAFF;;IAQA,IAAIpB,KAAK,GAAG,CAAZ,EAAe;MACb,MAAMmB,OAAN;IACD;;IAED,IAAI,CAACjB,aAAL,EAAoB;MAClBkB,cAAc;IAvCf,EAwCC;;;IAGF,OAAOD,OAAP;EACD,C","names":["Object","defineProperty","exports","value","typeImplementation","_utils","require","_click","_keyboard","element","text","delay","skipClick","skipAutoClose","initialSelectionStart","undefined","initialSelectionEnd","disabled","click","currentElement","getActiveElement","ownerDocument","getValue","getSelectionRange","selectionStart","selectionEnd","setSelectionRange","length","keyboardImplementationWrapper","document","promise","releaseAllKeys"],"sources":["/Users/ilze/Documents/git/ng-iz/node_modules/@testing-library/user-event/dist/type/typeImplementation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nasync function typeImplementation(element, text, {\n  delay,\n  skipClick = false,\n  skipAutoClose = false,\n  initialSelectionStart = undefined,\n  initialSelectionEnd = undefined\n}) {\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0\n  // but most of the time when people call \"type\", they expect it to type\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitly start typing with the cursor at 0. Not super common.\n\n\n  const value = (0, _utils.getValue)(currentElement());\n  const {\n    selectionStart,\n    selectionEnd\n  } = (0, _utils.getSelectionRange)(element);\n\n  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n  }\n\n  const {\n    promise,\n    releaseAllKeys\n  } = (0, _keyboard.keyboardImplementationWrapper)(text, {\n    delay,\n    document: element.ownerDocument\n  });\n\n  if (delay > 0) {\n    await promise;\n  }\n\n  if (!skipAutoClose) {\n    releaseAllKeys();\n  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n  return promise;\n}"]},"metadata":{},"sourceType":"script"}