{"ast":null,"code":"'use strict';\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.define-property.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.function.name.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.includes.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.string.includes.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.sort.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.map.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.from.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.string.iterator.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.reduce.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.slice.js\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _markup = require('./lib/markup');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nvar testHasAttribute = function (val) {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\n\nvar testNode = function (val) {\n  var constructorName = val.constructor.name;\n  var nodeType = val.nodeType,\n      tagName = val.tagName;\n  var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || testHasAttribute(val);\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n};\n\nvar test = function (val) {\n  var _val$constructor;\n\n  return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode(val);\n};\n\nexports.test = test;\n\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nvar serialize = function (node, config, indentation, depth, refs, printer) {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n\n  var type = nodeIsFragment(node) ? 'DocumentFragment' : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n\n  return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {\n    return attr.name;\n  }).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce(function (props, attribute) {\n    props[attribute.name] = attribute.value;\n    return props;\n  }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n};\n\nexports.serialize = serialize;\nvar plugin = {\n  serialize: serialize,\n  test: test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Object","defineProperty","exports","value","test","serialize","default","_markup","require","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","FRAGMENT_NODE","ELEMENT_REGEXP","testHasAttribute","val","hasAttribute","testNode","constructorName","constructor","name","nodeType","tagName","isCustomElement","includes","_val$constructor","nodeIsText","node","nodeIsComment","nodeIsFragment","config","indentation","depth","refs","printer","printText","data","printComment","type","toLowerCase","maxDepth","printElementAsLeaf","printElement","printProps","Array","from","attributes","map","attr","sort","reduce","props","attribute","indent","printChildren","prototype","slice","call","childNodes","children","plugin","_default"],"sources":["/Users/ilze/Documents/git/ng-iz/node_modules/pretty-format/build/plugins/DOMElement.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _markup = require('./lib/markup');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nconst testHasAttribute = val => {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\n\nconst testNode = val => {\n  const constructorName = val.constructor.name;\n  const {nodeType, tagName} = val;\n  const isCustomElement =\n    (typeof tagName === 'string' && tagName.includes('-')) ||\n    testHasAttribute(val);\n  return (\n    (nodeType === ELEMENT_NODE &&\n      (ELEMENT_REGEXP.test(constructorName) || isCustomElement)) ||\n    (nodeType === TEXT_NODE && constructorName === 'Text') ||\n    (nodeType === COMMENT_NODE && constructorName === 'Comment') ||\n    (nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment')\n  );\n};\n\nconst test = val => {\n  var _val$constructor;\n\n  return (\n    (val === null || val === void 0\n      ? void 0\n      : (_val$constructor = val.constructor) === null ||\n        _val$constructor === void 0\n      ? void 0\n      : _val$constructor.name) && testNode(val)\n  );\n};\n\nexports.test = test;\n\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n\n  const type = nodeIsFragment(node)\n    ? 'DocumentFragment'\n    : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n\n  return (0, _markup.printElement)(\n    type,\n    (0, _markup.printProps)(\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes)\n            .map(attr => attr.name)\n            .sort(),\n      nodeIsFragment(node)\n        ? {}\n        : Array.from(node.attributes).reduce((props, attribute) => {\n            props[attribute.name] = attribute.value;\n            return props;\n          }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    (0, _markup.printChildren)(\n      Array.prototype.slice.call(node.childNodes || node.children),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    config,\n    indentation\n  );\n};\n\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}