{"ast":null,"code":"\"use strict\";\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.keys.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.array.index-of.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.symbol.js\");\n\nvar _excluded = [\"delay\"];\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.define-property.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.assign.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.type = type;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _typeImplementation = require(\"./typeImplementation\"); // this needs to be wrapped in the event/asyncWrapper for React's act and angular's change detection\n// depending on whether it will be async.\n\n\nfunction type(element, text) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 0 : _ref$delay,\n      options = _objectWithoutProperties(_ref, _excluded); // we do not want to wrap in the asyncWrapper if we're not\n  // going to actually be doing anything async, so we only wrap\n  // if the delay is greater than 0\n\n\n  if (delay > 0) {\n    return (0, _dom.getConfig)().asyncWrapper(function () {\n      return (0, _typeImplementation.typeImplementation)(element, text, Object.assign({\n        delay: delay\n      }, options));\n    });\n  } else {\n    return void (0, _typeImplementation.typeImplementation)(element, text, Object.assign({\n      delay: delay\n    }, options)) // prevents users from dealing with UnhandledPromiseRejectionWarning\n    .catch(console.error);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;EAC3CG,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,IAARF,GAAeE,IAAfF;;AAEA,IAAIG,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAAlB;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,sBAAD,CAAjC,C,CAEA;AACA;;;AACA,SAASF,IAAT,CAAcI,OAAd,EAAuBC,IAAvB,EAGQ;EAAA,+EAAJ,EAAI;;EAAA,sBAFNC,KAEM;EAAA,IAFNA,KAEM,2BAFE,CAEF;EAAA,IADHC,OACG,8CACN;EACA;EACA;;;EACA,IAAID,KAAK,GAAG,CAAZ,EAAe;IACb,OAAO,CAAC,GAAGL,IAAI,CAACO,SAAT,IAAsBC,YAAtB,CAAmC;MAAA,OAAM,CAAC,GAAGN,mBAAmB,CAACO,kBAAxB,EAA4CN,OAA5C,EAAqDC,IAArD;QAC9CC,KAAK,EAALA;MAD8C,GAE3CC,OAF2C,EAAN;IAAnC,EAAP;EADF,OAKO;IACL,OAAO,KAAK,CAAC,GAAGJ,mBAAmB,CAACO,kBAAxB,EAA4CN,OAA5C,EAAqDC,IAArD;MACVC,KAAK,EAALA;IADU,GAEPC,OAFO,GAGT;IAHS,CAIXI,KAJW,CAILC,OAAO,CAACC,KAJH,CAAZ;EAKD;AACF","names":["Object","defineProperty","exports","value","type","_dom","require","_typeImplementation","element","text","delay","options","getConfig","asyncWrapper","typeImplementation","catch","console","error"],"sources":["/Users/ilze/Documents/git/ng-iz/node_modules/@testing-library/user-event/dist/type/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.type = type;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _typeImplementation = require(\"./typeImplementation\");\n\n// this needs to be wrapped in the event/asyncWrapper for React's act and angular's change detection\n// depending on whether it will be async.\nfunction type(element, text, {\n  delay = 0,\n  ...options\n} = {}) {\n  // we do not want to wrap in the asyncWrapper if we're not\n  // going to actually be doing anything async, so we only wrap\n  // if the delay is greater than 0\n  if (delay > 0) {\n    return (0, _dom.getConfig)().asyncWrapper(() => (0, _typeImplementation.typeImplementation)(element, text, {\n      delay,\n      ...options\n    }));\n  } else {\n    return void (0, _typeImplementation.typeImplementation)(element, text, {\n      delay,\n      ...options\n    }) // prevents users from dealing with UnhandledPromiseRejectionWarning\n    .catch(console.error);\n  }\n}"]},"metadata":{},"sourceType":"script"}