{"ast":null,"code":"\"use strict\";\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.define-property.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.string.search.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.regexp.exec.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.symbol.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.symbol.description.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSelectionRange = getSelectionRange;\nexports.hasSelectionSupport = hasSelectionSupport;\nexports.setSelectionRange = setSelectionRange;\n\nvar _isElementType = require(\"../misc/isElementType\"); // https://github.com/jsdom/jsdom/blob/c2fb8ff94917a4d45e2398543f5dd2a8fed0bdab/lib/jsdom/living/nodes/HTMLInputElement-impl.js#L45\n\n\nvar selectionSupportType;\n\n(function (selectionSupportType) {\n  selectionSupportType[\"text\"] = \"text\";\n  selectionSupportType[\"search\"] = \"search\";\n  selectionSupportType[\"url\"] = \"url\";\n  selectionSupportType[\"tel\"] = \"tel\";\n  selectionSupportType[\"password\"] = \"password\";\n})(selectionSupportType || (selectionSupportType = {}));\n\nvar InputSelection = Symbol('inputSelection');\n\nfunction hasSelectionSupport(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(selectionSupportType[element.type]);\n}\n\nfunction getSelectionRange(element) {\n  if (hasSelectionSupport(element)) {\n    return {\n      selectionStart: element.selectionStart,\n      selectionEnd: element.selectionEnd\n    };\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    var _InputSelection;\n\n    return (_InputSelection = element[InputSelection]) != null ? _InputSelection : {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n\n  var selection = element.ownerDocument.getSelection(); // there should be no editing if the focusNode is outside of element\n  // TODO: properly handle selection ranges\n\n  if (selection != null && selection.rangeCount && element.contains(selection.focusNode)) {\n    var range = selection.getRangeAt(0);\n    return {\n      selectionStart: range.startOffset,\n      selectionEnd: range.endOffset\n    };\n  } else {\n    return {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n}\n\nfunction setSelectionRange(element, newSelectionStart, newSelectionEnd) {\n  var _getSelectionRange = getSelectionRange(element),\n      selectionStart = _getSelectionRange.selectionStart,\n      selectionEnd = _getSelectionRange.selectionEnd;\n\n  if (selectionStart === newSelectionStart && selectionEnd === newSelectionEnd) {\n    return;\n  }\n\n  if (hasSelectionSupport(element)) {\n    element.setSelectionRange(newSelectionStart, newSelectionEnd);\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    ;\n    element[InputSelection] = {\n      selectionStart: newSelectionStart,\n      selectionEnd: newSelectionEnd\n    };\n  } // Moving the selection inside <input> or <textarea> does not alter the document Selection.\n\n\n  if ((0, _isElementType.isElementType)(element, 'input') || (0, _isElementType.isElementType)(element, 'textarea')) {\n    return;\n  }\n\n  var range = element.ownerDocument.createRange();\n  range.selectNodeContents(element); // istanbul ignore else\n\n  if (element.firstChild) {\n    range.setStart(element.firstChild, newSelectionStart);\n    range.setEnd(element.firstChild, newSelectionEnd);\n  }\n\n  var selection = element.ownerDocument.getSelection(); // istanbul ignore else\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}","map":{"version":3,"mappings":"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","names":["Object","defineProperty","exports","value","getSelectionRange","hasSelectionSupport","setSelectionRange","_isElementType","require","selectionSupportType","InputSelection","Symbol","element","isElementType","Boolean","type","selectionStart","selectionEnd","_InputSelection","selection","ownerDocument","getSelection","rangeCount","contains","focusNode","range","getRangeAt","startOffset","endOffset","newSelectionStart","newSelectionEnd","createRange","selectNodeContents","firstChild","setStart","setEnd","removeAllRanges","addRange"],"sources":["/Users/ilze/Documents/git/ng-iz/node_modules/@testing-library/user-event/dist/utils/edit/selectionRange.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSelectionRange = getSelectionRange;\nexports.hasSelectionSupport = hasSelectionSupport;\nexports.setSelectionRange = setSelectionRange;\n\nvar _isElementType = require(\"../misc/isElementType\");\n\n// https://github.com/jsdom/jsdom/blob/c2fb8ff94917a4d45e2398543f5dd2a8fed0bdab/lib/jsdom/living/nodes/HTMLInputElement-impl.js#L45\nvar selectionSupportType;\n\n(function (selectionSupportType) {\n  selectionSupportType[\"text\"] = \"text\";\n  selectionSupportType[\"search\"] = \"search\";\n  selectionSupportType[\"url\"] = \"url\";\n  selectionSupportType[\"tel\"] = \"tel\";\n  selectionSupportType[\"password\"] = \"password\";\n})(selectionSupportType || (selectionSupportType = {}));\n\nconst InputSelection = Symbol('inputSelection');\n\nfunction hasSelectionSupport(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(selectionSupportType[element.type]);\n}\n\nfunction getSelectionRange(element) {\n  if (hasSelectionSupport(element)) {\n    return {\n      selectionStart: element.selectionStart,\n      selectionEnd: element.selectionEnd\n    };\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    var _InputSelection;\n\n    return (_InputSelection = element[InputSelection]) != null ? _InputSelection : {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n\n  const selection = element.ownerDocument.getSelection(); // there should be no editing if the focusNode is outside of element\n  // TODO: properly handle selection ranges\n\n  if (selection != null && selection.rangeCount && element.contains(selection.focusNode)) {\n    const range = selection.getRangeAt(0);\n    return {\n      selectionStart: range.startOffset,\n      selectionEnd: range.endOffset\n    };\n  } else {\n    return {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n}\n\nfunction setSelectionRange(element, newSelectionStart, newSelectionEnd) {\n  const {\n    selectionStart,\n    selectionEnd\n  } = getSelectionRange(element);\n\n  if (selectionStart === newSelectionStart && selectionEnd === newSelectionEnd) {\n    return;\n  }\n\n  if (hasSelectionSupport(element)) {\n    element.setSelectionRange(newSelectionStart, newSelectionEnd);\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    ;\n    element[InputSelection] = {\n      selectionStart: newSelectionStart,\n      selectionEnd: newSelectionEnd\n    };\n  } // Moving the selection inside <input> or <textarea> does not alter the document Selection.\n\n\n  if ((0, _isElementType.isElementType)(element, 'input') || (0, _isElementType.isElementType)(element, 'textarea')) {\n    return;\n  }\n\n  const range = element.ownerDocument.createRange();\n  range.selectNodeContents(element); // istanbul ignore else\n\n  if (element.firstChild) {\n    range.setStart(element.firstChild, newSelectionStart);\n    range.setEnd(element.firstChild, newSelectionEnd);\n  }\n\n  const selection = element.ownerDocument.getSelection(); // istanbul ignore else\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}"]},"metadata":{},"sourceType":"script"}