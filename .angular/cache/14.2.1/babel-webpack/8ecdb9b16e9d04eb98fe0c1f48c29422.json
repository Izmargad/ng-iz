{"ast":null,"code":"\"use strict\";\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.object.define-property.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.string.search.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.regexp.exec.js\");\n\nrequire(\"/Users/ilze/Documents/git/ng-iz/node_modules/core-js/modules/es.number.constructor.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSpaceUntilMaxLength = getSpaceUntilMaxLength;\n\nvar _isElementType = require(\"../misc/isElementType\");\n\nvar _getValue = require(\"./getValue\");\n\nvar maxLengthSupportedTypes;\n\n(function (maxLengthSupportedTypes) {\n  maxLengthSupportedTypes[\"email\"] = \"email\";\n  maxLengthSupportedTypes[\"password\"] = \"password\";\n  maxLengthSupportedTypes[\"search\"] = \"search\";\n  maxLengthSupportedTypes[\"telephone\"] = \"telephone\";\n  maxLengthSupportedTypes[\"text\"] = \"text\";\n  maxLengthSupportedTypes[\"url\"] = \"url\";\n})(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));\n\nfunction getSpaceUntilMaxLength(element) {\n  var value = (0, _getValue.getValue)(element);\n  /* istanbul ignore if */\n\n  if (value === null) {\n    return undefined;\n  }\n\n  var maxLength = getSanitizedMaxLength(element);\n  return maxLength ? maxLength - value.length : undefined;\n} // can't use .maxLength property because of a jsdom bug:\n// https://github.com/jsdom/jsdom/issues/2927\n\n\nfunction getSanitizedMaxLength(element) {\n  var _element$getAttribute;\n\n  if (!supportsMaxLength(element)) {\n    return undefined;\n  }\n\n  var attr = (_element$getAttribute = element.getAttribute('maxlength')) != null ? _element$getAttribute : '';\n  return /^\\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : undefined;\n}\n\nfunction supportsMaxLength(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(maxLengthSupportedTypes[element.type]);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;EAC3CG,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,sBAARF,GAAiCE,sBAAjCF;;AAEA,IAAIG,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIE,uBAAJ;;AAEA,CAAC,UAAUA,uBAAV,EAAmC;EAClCA,uBAAuB,CAAC,OAAD,CAAvBA,GAAmC,OAAnCA;EACAA,uBAAuB,CAAC,UAAD,CAAvBA,GAAsC,UAAtCA;EACAA,uBAAuB,CAAC,QAAD,CAAvBA,GAAoC,QAApCA;EACAA,uBAAuB,CAAC,WAAD,CAAvBA,GAAuC,WAAvCA;EACAA,uBAAuB,CAAC,MAAD,CAAvBA,GAAkC,MAAlCA;EACAA,uBAAuB,CAAC,KAAD,CAAvBA,GAAiC,KAAjCA;AANF,GAOGA,uBAAuB,KAAKA,uBAAuB,GAAG,EAA/B,CAP1B;;AASA,SAASJ,sBAAT,CAAgCK,OAAhC,EAAyC;EACvC,IAAMN,KAAK,GAAG,CAAC,GAAGI,SAAS,CAACG,QAAd,EAAwBD,OAAxB,CAAd;EACA;;EAEA,IAAIN,KAAK,KAAK,IAAd,EAAoB;IAClB,OAAOQ,SAAP;EACD;;EAED,IAAMC,SAAS,GAAGC,qBAAqB,CAACJ,OAAD,CAAvC;EACA,OAAOG,SAAS,GAAGA,SAAS,GAAGT,KAAK,CAACW,MAArB,GAA8BH,SAA9C;EACA;AACF;;;AAGA,SAASE,qBAAT,CAA+BJ,OAA/B,EAAwC;EACtC,IAAIM,qBAAJ;;EAEA,IAAI,CAACC,iBAAiB,CAACP,OAAD,CAAtB,EAAiC;IAC/B,OAAOE,SAAP;EACD;;EAED,IAAMM,IAAI,GAAG,CAACF,qBAAqB,GAAGN,OAAO,CAACS,YAART,CAAqB,WAArBA,CAAzB,KAA+D,IAA/D,GAAsEM,qBAAtE,GAA8F,EAA3G;EACA,OAAO,QAAQI,IAAR,CAAaF,IAAb,KAAsBG,MAAM,CAACH,IAAD,CAANG,IAAgB,CAAtC,GAA0CA,MAAM,CAACH,IAAD,CAAhD,GAAyDN,SAAhE;AACD;;AAED,SAASK,iBAAT,CAA2BP,OAA3B,EAAoC;EAClC,OAAO,CAAC,GAAGJ,cAAc,CAACgB,aAAnB,EAAkCZ,OAAlC,EAA2C,UAA3C,KAA0D,CAAC,GAAGJ,cAAc,CAACgB,aAAnB,EAAkCZ,OAAlC,EAA2C,OAA3C,KAAuDa,OAAO,CAACd,uBAAuB,CAACC,OAAO,CAACc,IAAT,CAAxB,CAA/H;AACD","names":["Object","defineProperty","exports","value","getSpaceUntilMaxLength","_isElementType","require","_getValue","maxLengthSupportedTypes","element","getValue","undefined","maxLength","getSanitizedMaxLength","length","_element$getAttribute","supportsMaxLength","attr","getAttribute","test","Number","isElementType","Boolean","type"],"sources":["/Users/ilze/Documents/git/ng-iz/node_modules/@testing-library/user-event/dist/utils/edit/maxLength.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSpaceUntilMaxLength = getSpaceUntilMaxLength;\n\nvar _isElementType = require(\"../misc/isElementType\");\n\nvar _getValue = require(\"./getValue\");\n\nvar maxLengthSupportedTypes;\n\n(function (maxLengthSupportedTypes) {\n  maxLengthSupportedTypes[\"email\"] = \"email\";\n  maxLengthSupportedTypes[\"password\"] = \"password\";\n  maxLengthSupportedTypes[\"search\"] = \"search\";\n  maxLengthSupportedTypes[\"telephone\"] = \"telephone\";\n  maxLengthSupportedTypes[\"text\"] = \"text\";\n  maxLengthSupportedTypes[\"url\"] = \"url\";\n})(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));\n\nfunction getSpaceUntilMaxLength(element) {\n  const value = (0, _getValue.getValue)(element);\n  /* istanbul ignore if */\n\n  if (value === null) {\n    return undefined;\n  }\n\n  const maxLength = getSanitizedMaxLength(element);\n  return maxLength ? maxLength - value.length : undefined;\n} // can't use .maxLength property because of a jsdom bug:\n// https://github.com/jsdom/jsdom/issues/2927\n\n\nfunction getSanitizedMaxLength(element) {\n  var _element$getAttribute;\n\n  if (!supportsMaxLength(element)) {\n    return undefined;\n  }\n\n  const attr = (_element$getAttribute = element.getAttribute('maxlength')) != null ? _element$getAttribute : '';\n  return /^\\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : undefined;\n}\n\nfunction supportsMaxLength(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(maxLengthSupportedTypes[element.type]);\n}"]},"metadata":{},"sourceType":"script"}